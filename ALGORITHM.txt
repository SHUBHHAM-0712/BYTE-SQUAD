--> Include Necessary Libraries:
   *Include standard C++ libraries: <iostream>, <vector>, <fstream>, <cstring>, <algorithm>.
   *Include <tr1/unordered_map> for using unordered map.
   *Include <filesystem> for directory iteration.

-->Common Word Check Function (commonword):
   *It Opens "3.1_excluded_words.txt".
   *It also Read each word from the file.
   *If the given word matches any word in the file, 'commonword'return true; otherwise, return false.

-->Tokenization Function (splitStringIntoTokens):
   *'splitStringIntoTokens' takes a string as input.
   * It splits the string into tokens based on alphabetic characters and convert them to lowercase.
   * It returns a vector containing all the tokens.

-->Update Frequency Function (updateFrequency):
   *'updateFrequency' iterates through each word in the vector.
   *It Checks if the word is not common using commonword function.
   *If not common, update the frequency count in the unordered map.

-->Comparator Function (cmp):
   *comparison function 'cmp' sorts pairs of strings and integers in descending order of frequency.

-->Print Word Cloud Function (PrintWordCloude):
   *It print the specified number of most frequent words along with their frequencies.
   *It also generates a Python script "Word_Cloud222.py" for creating a word cloud visualization using the wordcloud library.

-->Main Function:
   *It initializes an empty unordered map to store word frequencies.
   *Main function specifies the folder path containing the files.
   *It iterates through files in the specified folder using <filesystem>.
   *Read each file, tokenize its content, and update the frequency map using updateFrequency.
   *Convert the frequency map to a vector of pairs for sorting and sort it based on word frequencies.
   *Call PrintWordCloude to print the word cloud and generate the Python script.
   *Handle exceptions such as file opening errors using try-catch blocks.

-->Namespace Declaration:
   *Create an alias fs for std::filesystem to simplify usage.

-->Error Handling:
   *Use try-catch blocks to handle file opening errors and other exceptions.
